# ppa:ethereum is not yet available on 22.04
FROM ubuntu:20.04

ARG ROOT_PASS
ARG USERNAME=hardhat
ARG HOME="/home/$USERNAME"
ARG ELAM_ABSPATH="$HOME/elam"
ARG NVIM_VERSION='v0.8.3'

RUN for arg in ROOT_PASS; \
  do \
  [ ! -z "${arg}" ] || { echo "ARG \"$arg\" needs to be set"; exit 1; } \
  done;

RUN echo "root:$ROOT_PASS" | chpasswd

SHELL ["/bin/bash", "-c"]

ENV DEBIAN_FRONTEND=nonintercative
RUN apt-get update && \
  apt-get upgrade -y && \
  apt-get install -y --no-install-recommends \
  bash-completion \
  build-essential \
  ca-certificates \
  curl \
  git \
  gpg-agent \
  jq \
  libpython3-dev \
  libudev-dev \
  locales-all locales \
  python3 \
  python3-pip \
  python3-setuptools \
  python3.8-venv \
  software-properties-common \
  sudo \
  wget \
  xdot \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

# Neovim requires manual retrieval of the latest version
# as the apt package is quite old
ARG NVIM_URL='https://github.com/neovim/neovim/releases/download'
RUN wget "${NVIM_URL}/${NVIM_VERSION}/nvim-linux64.deb" \
  -O /neovim.deb
RUN apt install -y /neovim.deb 
RUN rm /neovim.deb
ENV EDITOR=nvim

RUN add-apt-repository -y ppa:ethereum/ethereum && \
  apt-get update && \
  apt-get install -y --no-install-recommends \
  solc \
  ethereum \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
RUN apt-get update \
  && apt-get install -y nodejs \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

RUN npm install --global yarn

ENV VIRTUAL_ENV_PATH_MYTHRIL=/opt/venv/mythril
RUN python3 -m venv $VIRTUAL_ENV_PATH_MYTHRIL
ENV PATH="$VIRTUAL_ENV_PATH_MYTHRIL/bin:$PATH"
COPY src/requirements.mythril.txt .
RUN source $VIRTUAL_ENV_PATH_MYTHRIL/bin/activate
RUN pip install -r requirements.mythril.txt --no-input --no-cache-dir
RUN chown -R 1000:1000 $VIRTUAL_ENV_PATH_MYTHRIL

ENV VIRTUAL_ENV_PATH_SLITHER=/opt/venv/slither
RUN python3 -m venv $VIRTUAL_ENV_PATH_SLITHER
ENV PATH="$VIRTUAL_ENV_PATH_SLITHER/bin:$PATH"
COPY src/requirements.slither.txt .
RUN source $VIRTUAL_ENV_PATH_SLITHER/bin/activate
RUN pip install -r requirements.slither.txt --no-input --no-cache-dir
RUN chown -R 1000:1000 $VIRTUAL_ENV_PATH_SLITHER

ENV VIRTUAL_ENV_PATH_MANTICORE=/opt/venv/manticore
RUN python3 -m venv $VIRTUAL_ENV_PATH_MANTICORE
ENV PATH="$VIRTUAL_ENV_PATH_MANTICORE/bin:$PATH"
COPY src/requirements.manticore.txt .
RUN source $VIRTUAL_ENV_PATH_MANTICORE/bin/activate
RUN pip install -r requirements.manticore.txt --no-input --no-cache-dir
RUN chown -R 1000:1000 $VIRTUAL_ENV_PATH_MANTICORE

RUN cd $VIRTUAL_ENV_PATH_SLITHER/bin && \
  wget https://github.com/crytic/echidna/releases/download/v2.2.0/echidna-2.2.0-Ubuntu-22.04.tar.gz \
  -O echidna.tar.gz \
  && tar -xzf echidna.tar.gz \
  && rm echidna.tar.gz

# This is for crytic-compile binary
ENV PATH="${PATH}:${HOME}/.local/bin"

RUN sh -c 'echo "root:$ROOT_PASS" | chpasswd'
RUN useradd -md $HOME $USERNAME

# This line allows gh actions to run without the need for
# root permissions
RUN mkdir -p /github/home/.cache/hardhat-nodejs
RUN chown -R $USERNAME:1000 /github/home/.cache/hardhat-nodejs

# Required by vscode
RUN mkdir -p $HOME/.vscode-server/extensions
RUN mkdir -p $HOME/.vscode-server-insiders/extensions
RUN mkdir -p $HOME/.vscode-server/bin
# This is required by matplotlib in mythril venv
RUN mkdir -p $HOME/.config/matplotlib
RUN mkdir -p $HOME/.config/hardhat-nodejs
RUN mkdir -p $HOME/.local
RUN chown -R $USERNAME:1000 $HOME


ENV SHELL /bin/bash

# Gists
ARG GIST_URL='https://gist.githubusercontent.com/utkusarioglu'
ADD --chown=$USERNAME:1000 \
  "$GIST_URL/2d4be44dc7707afccd540ad99ba385e6/raw/create-env-example.sh" \
  /scripts/create-env-example.sh
ADD --chown=$USERNAME:1000 \
  "$GIST_URL/3523b00578807d63b05399fe57a4b2a7/raw/.bashrc" \
  $HOME/.bashrc
ADD --chown=$USERNAME:1000 \
  "$GIST_URL/d5c216c744460c45bf6260d0de4131b4/raw/.inputrc" \
  $HOME/.inputrc

# Elam
RUN git clone https://github.com/utkusarioglu/elam.git $ELAM_ABSPATH
RUN echo "alias elam=$ELAM_ABSPATH/elam.sh" >> $HOME/.bash_aliases

USER $USERNAME

RUN chmod +x \
  /scripts/create-env-example.sh \
  $HOME/.bashrc \
  $HOME/.inputrc 

COPY src/scripts /scripts
